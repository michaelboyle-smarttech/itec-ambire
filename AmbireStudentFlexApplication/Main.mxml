<?xml version="1.0" encoding="UTF-8" ?>
<!--   Copyright (C) 2012, SMART Technologies.
     All rights reserved.
  
     Redistribution and use in source and binary forms, with or without modification, are permitted
     provided that the following conditions are met:
   
      * Redistributions of source code must retain the above copyright notice, this list of
        conditions and the following disclaimer.
   
      * Redistributions in binary form must reproduce the above copyright notice, this list of
        conditions and the following disclaimer in the documentation and/or other materials
        provided with the distribution.
   
      * Neither the name of SMART Technologies nor the names of its contributors may be used to
         endorse or promote products derived from this software without specific prior written
         permission.
   
     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.
   
     Author: Michael Boyle
-->
<mx:Application width="550" height="600" backgroundColor="0xFFFFFF" horizontalAlign="center" creationComplete="application_creationCompleted()" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark">
<fx:Script><![CDATA[
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.utils.*;
	import mx.core.*;
	import mx.utils.StringUtil;
	import mx.graphics.codec.JPEGEncoder;
	import ru.inspirit.net.MultipartURLLoader;
	import org.eun.itec.ambire.student.AmbireCapture;
	
	[Embed(source="ambire.jpg")]
	[Bindable]
	public var AMBIRE_JPG:Class;
	[Embed(source="go.png")]
	[Bindable]
	public var GO_PNG:Class;
	[Embed(source="activity.png")]
	[Bindable]
	public var ACTIVITY_PNG:Class;
	[Embed(source="stop.png")]
	[Bindable]
	public var STOP_PNG:Class;
	[Embed(source="warning.png")]
	[Bindable]
	public var WARNING_PNG:Class;
	[Embed(source="shutter.mp3")]
	[Bindable]
	public var SHUTTER_MP3:Class;
	[Embed(source="error.mp3")]
	[Bindable]
	public var ERROR_MP3:Class;
	
	private static const REVERIFY_INTERVAL_MILLIS:int = 5 * 60 * 1000;
	private static const SCREENSHOT_INTERVAL_MILLIS:int = 2 * 60 * 1000;
	private static function uuid_create():String {
		var ALPHABET:String = "abcdefghijklmnoprstuvwxyz0123456789"
		var s:String = "q";
		for(var i:int = 0; i < 3; ++i) {
			var c:int = int(Math.random() * 1073741824);
			for(var j:int = 0; j < 30; j += 5) {
				s += ALPHABET.charAt(c & 31);
				c = c >> 5;
			}
		}
		return s;
	}
	private static function isNullOrWhiteSpace(s:String):Boolean {
		if(s != null) {
			var n:int = s.length;
			for(var i:int = 0; i < n; ++i) {
				var c:Number = s.charCodeAt(i);
				switch(c) {
				default:
					return false;
				case 0x20:
				case 0x9:
				case 0xa:
				case 0xc:
				case 0xd:
				case 0xa0:
					break;
				}
			}
		}
		return true;
	}
	private static function parseBoolean(s:String):Boolean {
		if(s == null) {
			return false;
		}
		switch(StringUtil.trim(s).toLowerCase()) {
		default:
			return true;
		case "":
		case "false":
		case "no":
		case "0":
			return false;
		}
	}
	private var m_mode:int = Mode.Disconnected;
	private var m_previousMode:int = Mode.Screenshot;
	private var m_currentFrame:Bitmap = null;
	private var m_verified:String = null;
	private var m_verifying:String = null;
	private var m_verification:Date = new Date(0);
	private var m_screenshot:Date = new Date(0);
	private var m_baseUrl:String = "http://ambire.itec.smartlabs.mobi/";
	private var m_uniqueIdentifier:String = uuid_create();
	private var m_camera:Camera = null;
	private var m_cameraStatus:int = CameraStatus.Undetermined;
	private var m_video:Video = null;
	
	private function checkCameraStatus():void {
		if(m_camera.muted) {
			m_cameraStatus = CameraStatus.Unavailable;
			if(m_mode == Mode.Webcam) {
				setMode(Mode.Screenshot);
			}
		} else {
			m_cameraStatus = CameraStatus.Available;
			if(m_mode != Mode.Disconnected) {
				webcamButton.enabled = true;
				if(m_mode == Mode.Webcam) {
					displayPanel.autoLayout = false;
					videoContainer.includeInLayout = true;
					videoContainer.visible = true;
					staticImage.includeInLayout = false;
					staticImage.visible = false;
					displayPanel.autoLayout = true;
					displayPanel.validateNow();
				}
			}
		}
	}
	
	private function application_creationCompleted():void {
		nameTextField.setFocus();
		var taskTimer:Timer = new Timer(1 * 1000, 0);
		taskTimer.addEventListener(TimerEvent.TIMER, taskTimer_ticked);
		taskTimer.start();
		setReason(Reason.MissingInfo);
		setMode(Mode.Disconnected, true);
		m_camera = Camera.getCamera();
		if(m_camera != null) {
			m_camera.setMode(500, 400, 15.0);
			m_camera.addEventListener(StatusEvent.STATUS, function(ev:StatusEvent):void {
				checkCameraStatus();
			});
		}
	}
	
	private function enterMonitor():void {
		// NO OP in ActionScript owing to lack of threading
	}
	
	private function leaveMonitor():void {
		// NO OP in ActionScript owing to lack of threading
	}
	
	private function taskTimer_ticked(ev:TimerEvent):void {
		var now:Date = new Date();
		var age:Number = now.time - m_verification.time;
		enterMonitor();
        var shouldVerifyNow:Boolean = (isNullOrWhiteSpace(m_verified) && !isNullOrWhiteSpace(m_verifying)) || (isNullOrWhiteSpace(m_verifying) && !isNullOrWhiteSpace(m_verified) && age >= REVERIFY_INTERVAL_MILLIS);
		leaveMonitor();
    	if(shouldVerifyNow) {
    		beginVerify();
    	}
    	if(m_mode == Mode.Screenshot && (now.time - m_screenshot.time) > SCREENSHOT_INTERVAL_MILLIS) {
    		takeScreenshot();
    	}
	}
	
	private function takeScreenshot():void {
		m_screenshot = new Date();
		setCurrentFrame(AmbireCapture.capture(), "screenshot.jpg");
	}
	
	private function playSound(sound:String):void {
		var s:Sound = null;
		switch(sound) {
		default:
			break;
		case "error":
			s = new ERROR_MP3();
			break;
		case "shutter":
			s = new SHUTTER_MP3();
			break;
		}
		if(s != null) {
			s.play();
		}
	}
	
	private function playErrorSound():void {
		playSound("error");
	}
	
	private static function scaleBitmap(bmp:Bitmap, width:int, height:int):Bitmap {
		var W:int = bmp.width;
		var H:int = bmp.height;
		if(W <= width && H <= height) {
			return bmp;
		}
		var w:int = width;
		var h:int = height;
		if((Number(W) / Number(H)) >= (Number(width) / Number(height))) {
			h = int(Math.min(H * w / Number(W), height));
		} else {
			w = int(Math.min(W * h / Number(H), width));
		}
		var sx:Number = Number(w) / Number(W);
		var sy:Number = Number(h) / Number(H);
		var d:BitmapData = new BitmapData(w, h, false, 0xFFFFFFFF);
		var m:Matrix = new Matrix();
		m.scale(sx, sy);
		d.draw(bmp, m, null, null, null, true);
		return new Bitmap(d);
	}
	
	private function uploadFrame(bmp:Bitmap, kind:String, fileName:String, replace:Boolean):void {
		var enc:JPEGEncoder = new JPEGEncoder(80.0);
		var bytes:ByteArray = enc.encode(bmp.bitmapData);
		var req:MultipartURLLoader = new MultipartURLLoader();
		req.addVariable("name", nameTextField.text);
		req.addVariable("pin", m_verified);
		req.addVariable("kind", kind);
		req.addVariable("width", String(bmp.width));
		req.addVariable("height", String(bmp.height));
		if(replace) {
			req.addVariable("replace", "replace");
		}
		req.addFile(bytes, fileName, "file", "image/jpeg");
		req.addEventListener(Event.COMPLETE, function(ev:Event):void {
		});
		req.load(m_baseUrl + "upload");
	}
	
	private function setCurrentFrame(bmp:Bitmap, fileName:String):void {
		m_currentFrame = bmp;
		if(bmp == null) {
			bmp = new AMBIRE_JPG();
		} else if(!(bmp is AMBIRE_JPG) && (fileName != null)) {
			playSound("shutter");
			bmp = scaleBitmap(bmp, 500, 400);
			var kind:String = m_uniqueIdentifier;
			var replace:Boolean = false;
			switch(m_mode) {
			case Mode.Screenshot:
				kind += ".screenshot";
				replace = true;
				break;
			case Mode.Webcam:
				kind += ".webcam";
				break;
			case Mode.Upload:
				kind += ".upload";
				break;
			}
			uploadFrame(bmp, kind, fileName, replace);
		}
		if(bmp == null) {
			staticImage.source = null;
		} else {
			staticImage.source = bmp;
		}
	}
	
	private function setMode(m:int, force:Boolean = false):void {
		if(m_mode == m && !force) {
			return;
		}
		if(m_mode != Mode.Disconnected) {
			m_previousMode = m_mode;
		}
		m_mode = m;
		if(m != Mode.Disconnected) {
			screenshotButton.enabled = true;
			uploadButton.enabled = true;
			webcamButton.enabled = (m_cameraStatus != CameraStatus.Unavailable);
		} else {
			screenshotButton.enabled = false;
			uploadButton.enabled = false;
			webcamButton.enabled = false;
			setCurrentFrame(null, null);
			reasonIcon.source = new GO_PNG();
		}
		if(m == Mode.Screenshot) {
			takeScreenshot();
		}
		displayPanel.autoLayout = false;
		buttonPanel.autoLayout = false;
		if(m == Mode.Webcam) {
			webcamControlPanel.visible = true;
			webcamControlPanel.includeInLayout = true;
			webcamButton.visible = false;
			webcamButton.includeInLayout = false;
			m_video = new Video();
			m_video.attachCamera(m_camera);
			m_video.width = 500;
			m_video.height = 400;
			videoContainer.addChild(m_video);
			if(m_cameraStatus == CameraStatus.Available) {
				staticImage.visible = false;
				staticImage.includeInLayout = false;
				videoContainer.includeInLayout = true;
				videoContainer.visible = true;
			} else {
				checkCameraStatus();
			}
		} else {
			finishWebcam(false);
		}
		buttonPanel.autoLayout = true;
		buttonPanel.validateNow();
		displayPanel.autoLayout = true;
		displayPanel.validateNow();
	}
	
	private function setReason(r:int):void {
		switch(r) {
		default:
			reasonIcon.visible = false;
			reasonTextField.visible = false;
			break;
		case Reason.MissingInfo:
			reasonIcon.source = new GO_PNG();
			reasonIcon.visible = true;
			reasonTextField.text = "Type your name and PIN to connect to the Ambire cloud.";
			reasonTextField.visible = true;
			break;
		case Reason.VerifyingInfo:
			reasonIcon.source = new ACTIVITY_PNG();
			reasonIcon.visible = true;
			reasonTextField.text = "Connecting to Ambire cloud...";
			reasonTextField.visible = true;
			break;
		case Reason.Rejected:
			reasonIcon.source = new STOP_PNG();
			reasonIcon.visible = true;
			reasonTextField.text = "PIN is incorrect.";
			reasonTextField.visible = true;
			break;
		case Reason.NoConnection:
			reasonIcon.source = new WARNING_PNG();
			reasonIcon.visible = true;
			reasonTextField.text = "Can\'t connect to the Ambire cloud.";
			reasonTextField.visible = true;
			break;
		}
    }
	
	private function screenshotButton_clicked(ev:Event):void {
		setMode(Mode.Screenshot, true);
	}
	
	private function finishWebcam(validateLayout:Boolean = true):void {
		if(validateLayout) {
			buttonPanel.autoLayout = false;
			displayPanel.autoLayout = false;
		}
		webcamControlPanel.visible = false;
		webcamControlPanel.includeInLayout = false;
		webcamButton.visible = true;
		webcamButton.includeInLayout = true;
		videoContainer.visible = false;
		videoContainer.includeInLayout = false;
		staticImage.visible = true;
		staticImage.includeInLayout = true;
		if(m_video != null) {
			videoContainer.removeChild(m_video);
			m_video.attachCamera(null);
			m_video = null;
		}
		if(validateLayout) {
			buttonPanel.autoLayout = true;
			buttonPanel.validateNow();
			displayPanel.autoLayout = true;
			displayPanel.validateNow();
		}
	}
	
	private function webcamButton_clicked(ev:Event):void {
		setMode(Mode.Webcam, true);
	}
	
	private function bitmapFromDrawable(v:IBitmapDrawable,w:int,h:int):Bitmap {
		var d:BitmapData = new BitmapData(w, h, false, 0xFFFFFFFF);
		d.draw(v, null, null, null, null, true);
		return new Bitmap(d);
	}
	private function takePictureButton_clicked(ev:Event):void {
		if(m_video != null) {
			setCurrentFrame(bitmapFromDrawable(videoContainer, videoContainer.width, videoContainer.height), "webcam.jpg");
		}
		finishWebcam();
	}
	
	private function cancelButton_clicked(ev:Event):void {
		setCurrentFrame(m_currentFrame, null);
		m_mode = m_previousMode;
		finishWebcam();
	}
	
	private static function fileName(s:String):String {
		var lastSlash:int = s.lastIndexOf('/');
		var lastBackslash:int = s.lastIndexOf('\\');
		if(lastBackslash > lastSlash) {
			lastSlash = lastBackslash;
		}
		if(lastSlash >= 0) {
			return s.slice(lastSlash + 1);
		} else {
			return s;
		}
	}
	
	private function uploadButton_clicked(ev:Event):void {
		var loader:Loader = new Loader();
		var browser:FileReference = new FileReference(); 
		loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(ev2:Event):void {
			setMode(Mode.Upload);
			var bmp:Bitmap = loader.content as Bitmap;
			setCurrentFrame(bmp, fileName(browser.name));
			displayPanel.autoLayout = false;
			videoContainer.visible = false;
			videoContainer.includeInLayout = false;
			staticImage.visible = true;
			staticImage.includeInLayout = true;
			videoContainer.removeChild(loader);
			displayPanel.autoLayout = true;
			displayPanel.validateNow();
		});
		loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function(ev2:IOErrorEvent):void {
			playErrorSound();
		});
		loader.addEventListener(AsyncErrorEvent.ASYNC_ERROR, function(ev2:AsyncErrorEvent):void {
			playErrorSound();
		});
		loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function(ev2:SecurityErrorEvent):void {
			playErrorSound();
		});
		browser.addEventListener(Event.SELECT, function(ev2:Event):void {
			browser.load();
		});
		browser.addEventListener(Event.COMPLETE, function(ev2:Event):void {
			displayPanel.autoLayout = false;
			staticImage.visible = false;
			staticImage.includeInLayout = false;
			videoContainer.visible = true;
			videoContainer.includeInLayout = true;
			videoContainer.addChild(loader);
			displayPanel.autoLayout = true;
			displayPanel.validateNow();
			loader.loadBytes(browser.data);
		});
		browser.browse(new Array(new FileFilter("Image Files (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png")));
	}
	
	private function nameTextField_changed(ev:Event):void {
		checkSettings();
	}
	
	private function pinTextField_changed(ev:Event):void {
		checkSettings();
	}
	
	private function checkSettings():void {
		if(isNullOrWhiteSpace(nameTextField.text) || isNullOrWhiteSpace(pinTextField.text)) {
			setReason(Reason.MissingInfo);
		} else {
			setNeedsVerify(pinTextField.text);
		}
	}
	
	private function setNeedsVerify(pin:String):void {
		enterMonitor();
		if(pin != m_verified) {
			m_verifying = pin;
			m_verified = null;
			m_verification = new Date(0);
		}
		leaveMonitor();
	}
	
	private function beginVerify():void {
		verify();
	}
	
	private function verify():void {
		enterMonitor();
		var pin:String = m_verifying;
		m_verifying = null;
		m_verified = null;
		leaveMonitor();
		if(!isNullOrWhiteSpace(pin)) {
			setReason(Reason.VerifyingInfo);
			var req:URLRequest = new URLRequest(m_baseUrl + "verify?p=" + encodeURIComponent(pin));
			var loader:URLLoader = new URLLoader();
			loader.addEventListener(Event.COMPLETE, function(ev:Event):void {
				var loader:URLLoader = ev.target as URLLoader;
				var accepted:Boolean = parseBoolean(loader.data as String);
				enterMonitor();
				m_verification = new Date();
				if(m_verifying == null) {
					m_verified = pin;
				}
				leaveMonitor();
				setReason(accepted ? Reason.AllGood : Reason.Rejected);
				if(accepted) {
					if(m_mode == Mode.Disconnected) {
						if(m_previousMode == Mode.Disconnected) {
							m_previousMode = Mode.Screenshot;
						}
						setMode(m_previousMode, true);
					}
				} else {
					setMode(Mode.Disconnected);
				}
			});
			loader.addEventListener(IOErrorEvent.IO_ERROR, function(ev:IOErrorEvent):void {
				verify_failed(pin,Reason.NoConnection);
			});
			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function(ev:SecurityErrorEvent):void {
				verify_failed(pin,Reason.NoConnection);
			});
			loader.load(req);
		}			
	}
	
	private function verify_failed(pin:String,reason:int):void {
		enterMonitor();
		m_verification = new Date();
		m_verified = pin;
		leaveMonitor();
		setReason(reason);
    	setMode(Mode.Disconnected);
	}
	
	
]]></fx:Script>
<mx:Box direction="vertical">
	<mx:HBox id="displayPanel" width="500" height="400">
		<mx:Image id="staticImage" source="{AMBIRE_JPG}" width="500" height="400" visible="true" includeInLayout="true" />
		<mx:UIComponent id="videoContainer" width="500" height="400" visible="false" includeInLayout="false" />
	</mx:HBox>
	<mx:Grid width="100%">
		<mx:GridRow width="100%">
			<mx:GridItem>
				<mx:Label text="Name:" textAlign="right" />
			</mx:GridItem>
			<mx:GridItem width="100%">
				<mx:TextInput id="nameTextField" width="100%" change="nameTextField_changed(event);" textAlign="left" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<mx:Label text="PIN:" textAlign="right" />
			</mx:GridItem>
			<mx:GridItem width="100%">
				<mx:TextInput id="pinTextField" width="100%" change="pinTextField_changed(event);" textAlign="left" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem />
			<mx:GridItem width="100%">
				<mx:Box direction="horizontal" verticalAlign="middle">
					<mx:Image id="reasonIcon" source="{GO_PNG}" width="24" height="24" />
					<mx:Label id="reasonTextField" text="Type your name and PIN to connect to Ambire" />
				</mx:Box>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
	<mx:Box direction="horizontal" id="buttonPanel" width="100%" height="40" horizontalAlign="center">
		<mx:Button id="screenshotButton" label="Screenshot" percentWidth="30" click="screenshotButton_clicked(event);" enabled="false" />
		<mx:Button id="webcamButton" label="Webcam" percentWidth="30" includeInLayout="true" visible="true" click="webcamButton_clicked(event);" enabled="false" />
		<mx:Box direction="horizontal" id="webcamControlPanel" percentWidth="30" includeInLayout="false" visible="false">
			<mx:Button id="takePictureButton" label="Take Picture" click="takePictureButton_clicked(event);" />
			<mx:Button id="cancelButton" label="Cancel" click="cancelButton_clicked(event);" />
		</mx:Box>
		<mx:Button id="uploadButton" label="Upload" percentWidth="30" click="uploadButton_clicked(event);" enabled="false" />
	</mx:Box>
</mx:Box>
</mx:Application>
